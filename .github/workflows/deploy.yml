# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  push:
    branches: [ develop ]

env:
  S3_BUCKET_NAME: hous-build

jobs:
  build:
    runs-on: ubuntu-18.04

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: create application.properties file
        working-directory: ./src/main/resources
        env:
          PORT: ${{ secrets.PORT }}
          MYSQL_URL: ${{ secrets.MYSQL_URL }}
          MYSQL_USERNAME: ${{ secrets.MYSQL_USERNAME}}
          MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD}}
          MYSQL_DRIVER_CLASS_NAME: ${{ secrets.MYSQL_DRIVER_CLASS_NAME}}
          REDIS_HOST: ${{ secrets.REDIS_HOST }}
          REDIS_PORT: ${{ secrets.REDIS_PORT }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          AWS_S3_ACCESS_KEY: ${{ secrets.AWS_S3_ACCESS_KEY }}
          AWS_S3_SECRET_KEY: ${{ secrets.AWS_S3_SECRET_KEY }}
          AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          FIREBASE_URI: ${{ secrets.FIREBASE_URI }}
          FIREBASE_SERVICE_JSON: ${{ secrets.FIREBASE_SERVICE_JSON }}

        run: |
          touch application.properties
          echo server.port=$PORT >> application.properties
          echo server.servlet.encoding.charset=UTF-8 >> application.properties
          echo server.servlet.encoding.force=true >> application.properties
          echo spring.servlet.multipart.max-file-size=10MB >> application.properties
          echo spring.servlet.multipart.max-request-size=10MB >> application.properties
          echo logging.level.org.hibernate.type.descriptor.sql=trace >> application.properties
          echo logging.level.com.amazonaws.util.EC2MetadataUtils=error >> application.properties
          echo spring.datasource.url=$MYSQL_URL >> application.properties
          echo spring.datasource.username=$MYSQL_USERNAME >> application.properties
          echo spring.datasource.password=$MYSQL_PASSWORD >> application.properties
          echo spring.datasource.driver-class-name=$MYSQL_DRIVER_CLASS_NAME >> application.properties
          echo spring.jpa.hibernate.ddl-auto=update >> application.properties
          echo spring.jpa.properties.hibernate.format_sql=true >> application.properties
          echo spring.jpa.properties.hibernate.default_batch_fetch_size=1000 >> application.properties
          echo spring.redis.host=$REDIS_HOST >> application.properties
          echo spring.redis.port=$REDIS_PORT >> application.properties
          echo jwt.secret=$JWT_SECRET >> application.properties
          echo cloud.aws.credentials.accessKey=$AWS_S3_ACCESS_KEY >> application.properties
          echo cloud.aws.credentials.secretKey=$AWS_S3_SECRET_KEY >> application.properties
          echo cloud.aws.s3.bucket=$AWS_S3_BUCKET >> application.properties
          echo cloud.aws.region.static=$AWS_REGION >> application.properties
          echo cloud.aws.stack.auto=false >> application.properties
          echo cloud.firebase.credentials.uri=$FIREBASE_URI >> application.properties
          
          mkdir firebase
          touch ./firebase/firebase_service_key.json
          echo $FIREBASE_SERVICE_JSON >> ./firebase/firebase_service_key.json

      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
        shell: bash

      #      - name: Test with Gradle
      #          run: ./gradlew test

      - name: Build with Gradle
        run: ./gradlew build -x test
        shell: bash

      - name: Make zip file
        run: zip -r ./code-deploy.zip .
        shell: bash

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_S3_ACCESS_KEY  }}
          aws-secret-access-key: ${{ secrets.AWS_S3_SECRET_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Upload to S3
        run: aws s3 cp --region ap-northeast-2 ./code-deploy.zip s3://$S3_BUCKET_NAME/code-deploy.zip

      - name: Code Deploy
        run: aws deploy create-deployment
          --application-name hous-codedeploy
          --deployment-config-name CodeDeployDefault.OneAtATime
          --deployment-group-name GROUP
          --s3-location bucket=$S3_BUCKET_NAME,bundleType=zip,key=code-deploy.zip
